name: master

on:
  # schedule:
  #   - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      testParam:
        description: 'Test parameter'     
        required: true
        default: '1'
  push:
    branches:
      - master

jobs:
  run_master:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      # matrix:
      #   os:
      #     - 'centos:7'
      #   python:
      #     - '3.7'
      #     - '3.8'
      #     - '3.9'
      #     - '3.10'
        # python-version: [ '3.8.1', '3.7.5', '3.5.4' ]
    # name: Python ${{ matrix.python-version }} - ${{ matrix.os }}
  
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # - name: Setup NodeJS
    #   uses: actions/setup-node@main
    #   with:
    #     node-version-file: 'package.json'

    # - run: node --version

    # - run: echo $RUNNER_OS
    # - run: Get-Command pipx
    # - run: Remove-Item -Force -Recurse 'C:\hostedtoolcache\windows\Python\3.10.5'

    # - run: ls -la /opt/hostedtoolcache/Python


    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        check-latest: true
        # architecture: "x86"
      

    - run: python --version
    # - run: python ./sample.py
  
    # - run: echo $pythonLocation
    # - run: ls -la $pythonLocation/include

    # - name: Setup Poetry
    #   run: |
    #     curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.1.14 python3.7

    # - name: Load cached poetry packages
    #   id: cached-poetry-dependencies
    #   uses: actions/cache@v2
    #   with:
    #     path: .venv
    #     key: poetry-ubuntu-3.7.13-${{ hashFiles('**/poetry.lock') }}

    # - name: Poetry install
    #   run: |
    #     CPATH=$pythonLocation/include/python3.7m
    #     echo "CPATH=$CPATH" >> $GITHUB_ENV
    #     poetry env use 3.7
    #     poetry install --no-interaction

    # - name: Setup Python
    #   uses: actions/setup-python@v4
    #   id: setup-python
    #   with:
    #     python-version: '3.10'
    #     architecture: 'x86'

    # - run: python --version
    # - run: pip install numpy==1.23
    # - run: |
    #     TESTENV=$(which python)
    #     file $TESTENV
    # - run: Get-Content $env:USERPROFILE/.virtualenvs/test-repo-2WGirRaQ/pyvenv.cfg
    # - name: Install pipenv
    #   run: pipx install pipenv --python ${{ steps.setup-python.outputs.python-path }}
    # - name: pipenv help
    #   run: |
    #     pipenv --version
    #     pipenv --help
    # - name: Install dependencies
    #   run: |
    #     pipenv install --verbose --python ${{ steps.setup-python.outputs.python-path }}
    # - run: Get-ChildItem $env:USERPROFILE/.virtualenvs

    # - run: env

    # - run: sudo xcrun simctl shutdown all && sudo xcrun simctl erase all
    # - run: xcversion --help
    # - run: xcversion list
    # - run: sudo xcode-select -s /Applications/Xcode_13.1.app/Contents/Developer
    # - run: sudo xcversion simulators --install='iOS 13.0'

    # - name: set up python 3.10
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.10'

    # - name: cache dependencies
    #   id: xyz-cache
    #   uses: actions/cache@v3
    #   with:
    #     path: venv
    #     key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

    # - name: install xyz
    #   if: steps.sl-cache.outputs.cache-hit != 'true'
    #   run: |
    #     python -m venv venv
    #     source venv/bin/activate
    #     pip install -r ./requirements.txt

    # - run: ls -la venv
    # - run: cat venv/pyvenv.cfg


    # - uses: actions/setup-go@v3
    #   with:
    #     go-version-file: 'go.mod'
    #     check-latest: true

    # - run: go version

    # - run: brew install tcl-tk

    # - name: Test
    #   run: |
    #     python --version
    #     python3 --version
    #     curl "https://www.python.org/ftp/python/3.10.5/python-3.10.5-macos11.pkg" --output python3.pkg
    #     sudo installer -pkg python3.pkg -target /
    #     python3 --version
    #     which python3
    #     # mkdir test
    #     # 7z x python3.pkg -o./test
    #     # cd test
    #     echo "--------"
    #     pythonDir=$(readlink $(which python3) | xargs dirname)
    #     echo $pythonDir

    # - name: Set up Python
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: '3.9'     
